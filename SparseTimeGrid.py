from pathlib import Path
from datetime import datetime
import numpy as np
from collections import namedtuple
from itertools import groupby
import pickle as pkl

from GeoTimeSeries import GeoTimeSeries as GTS

TSParams = namedtuple("TSParams", "file flabel mlabel idx t0 dt size coords")

class SparseTimeGrid:
    """
    Class for interfacing with a collection of GeoTimeSeries objects stored
    as serial files generated by the class in a single directory.

    SparseTimeGrid serves as an abstraction of the coordinate grid on which
    GeoTimeSeries objects are embedded, associating the 1D time series with
    a coordinate location as well as static datasets, and uses the fields in
    the standard name scheme of GeoTimeSeries objects to enable heuristic
    searching and need-based dynamic loading of specific time series and
    features.
    """
    def __init__(self, ycoords:np.array, xcoords:np.array):
        """
        The SparseTimeGrid must be initialized with equally-shaped 2d
        coordinate grids for the y and x axes of the grid. All static datasets
        and GeoTimeSeries pixels must be on the grid described by the coords.

        :@param ycoords: (M,N) shaped array containing y coordinate values at
        M vertical points and N horizontal points.
        :@param xcoords: (M,N) shaped array containing x coordinate values at
        M vertical points and N horizontal points.
        """
        # Coordinate arrays must be 2d and uniform-shape
        assert ycoords.shape == xcoords.shape
        assert len(ycoords.shape) == 2
        self._coords = np.dstack((ycoords, xcoords))
        self._timeseries = []
        self._static = {}

    @property
    def coords(self):
        return self._coords

    @property
    def static(self):
        return self._static

    def add_static(self, name:str, data:np.array):
        assert not name in self._static.keys()
        assert data.shape == self._coords.shape[:2]
        self._static[name] = data

    def add_data_dir(self, data_dir:Path):
        """
        Search a directory containing GeoTimeSeries .npy files, adding them
        to the SparseTimeGrid so that they can be returned with searches.
        """
        data_dir = Path(data_dir)
        assert data_dir.is_dir()
        for f in data_dir.iterdir():
            fields = GTS.file_to_fields(f)
            if not fields:
                continue
            times, idx, flabel, mlabel = fields
            t0, dt, size = times
            self._timeseries.append(TSParams(
                file=f, flabel=flabel, mlabel=mlabel, idx=idx,
                t0=t0, dt=dt, size=size, coords=self._coords[idx]))

    def search(self, flabel:str=None, mlabel:str=None, time_range:tuple=None,
               yrange:tuple=None, xrange:tuple=None, static:dict=None,
               group_pixels:bool=False):
        """
        Use a series of attribute constraints to search the directory of
        GeoTimeSeries serial files for a specific subset of time series.

        :@param flabel: String feature label that matches all returned results
        :@param mlabel: String modifier label that matches all returned results
        :@param time_range: 2-tuple of datetime objects describing an inclusive
                strict range of timesteps that must be contained in every
                returned time series.
        :@param yrange: 2-tuple of y coordinate values that all returned
                results must inclusively fall within
        :@param xrange: 2-tuple of x coordinate values that all returned
                results must inclusively fall within
        :@param static: dict pairing static data labels to a value that all
                results must be equal to in the specified static field.
        :@param group_pixels: if True, returns a dict mapping pixel indeces to
                a list of every qualifying GeoTimeSeries associated with each
                unique pixel location.
        :@return: List of GeoTimeSeries from within added data directories
                that fulfil all provided constraints
        """
        cand = self._timeseries
        if flabel:
            cand = [ts for ts in cand if ts.flabel==flabel]
        if mlabel:
            cand = [ts for ts in cand if ts.mlabel==mlabel]
        if time_range:
            assert len(time_range)==2 and time_range[0]<time_range[1]
            lb_valid = [ts for ts in cand if ts.t0 <= time_range[0]]
            cand = [ts for ts in lb_valid
                    if ts.t0+ts.dt*ts.size >= time_range[1]]
        if yrange:
            assert len(yrange)==2 and yrange[0]<yrange[1]
            cand = [ts for ts in cand if yrange[0]<=ts.coords[0]<=yrange[1]]
        if xrange:
            assert len(xrange)==2 and xrange[0]<xrange[1]
            cand = [ts for ts in cand if xrange[0]<=ts.coords[1]<=xrange[1]]
        if static:
            for k in set(static.keys()).intersection(set(self._static.keys())):
                cand = [ts for ts in cand if \
                        self._static[k][ts.idx]==static[k]]
        if not group_pixels:
            return [GTS.load(ts.file) for ts in cand]
        else:
            keyfunc = lambda c:c.idx
            sorted_cand = sorted([GTS.load(ts.file) for ts in cand],
                                 key=keyfunc)
            return dict([(k,list(g)) for k,g in \
                    groupby(sorted_cand, keyfunc)])

if __name__=="__main__":
    data_dir = Path("data")
    static_pkl = data_dir.joinpath("static/nldas2_static_all.pkl")
    """ Load static datasets from pkl created by nldas_static_netcdf.py """
    static = pkl.load(static_pkl.open("rb"))
    stg = SparseTimeGrid(*static["geo"])
    stg.add_data_dir("data/GTS")
    stg.add_static("sand_pct", static["soil_comp"][:,:,0])
    stg.add_static("silt_pct", static["soil_comp"][:,:,1])
    stg.add_static("clay_pct", static["soil_comp"][:,:,2])
    stg.add_static("veg_type_ints", static["veg_type_ints"])
    stg.add_static("soil_type_ints", static["soil_type_ints"])
    for i in range(len(static["params_info"])):
        stg.add_static(
                static["params_info"][i]["standard_name"].replace(" ","_"),
                static["params"][i])

    #stg.add_static("soil_comp", static["soil_comp"])
    print([gts.idx for gts in stg.search(
        flabel="PRES",
        time_range=(datetime(year=2021, month=7, day=1),
                    datetime(year=2021, month=8, day=1)),
        #static={"soil_type_ints":1}
        )])
