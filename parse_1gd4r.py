import numpy as np
import struct
from pathlib import Path
import pickle as pkl
import sys

def parse_1gd4r(lisfile:Path, size:int=None):
    """
    Reads a LIS-style 1gd4r data file, which is fortran direct-access
    and big-endian format.
    :@param lisfile: Path to LIS 1gd4r data file (generated by LDT)
    :@param size: Size of the file in number of 4B floating point values.
        If None, does file stat to determine size. The default behavior
        might be unstable for sym-linked files.
    """
    #if not size:
    #    size = int(lisfile.stat().st_size/4)
    #lis_bytes = lisfile.open("rb").read(4*size)
    #if sys.byteorder == "little":
    with lisfile.open("rb") as lisfp:
        return np.fromfile(lisfp, ">f4")


    return np.asarray(struct.unpack( ">"+"f"*size, lis_bytes))
if __name__=="__main__":
    statsgo_stex = Path("samples/soiltexture_1KM_STATSGO-FAO.1gd4r")
    print(f"Parsing {statsgo_stex.as_posix()}")
    stex = parse_1gd4r(statsgo_stex).astype(np.uint8)
    with open("soiltexture_1KM.pkl", "wb") as pklfp:
        pkl.dump(stex, pklfp)
    print(np.unique(stex))
    print(stex.shape)

    #"""
    ncep_slope = Path("samples/slopetype_NCEP_1KM.1gd4r")
    slope = parse_1gd4r(ncep_slope).astype(np.uint8)
    with open("slopetype_NCEP_1KM.pkl", "wb") as pklfp:
        pkl.dump(slope, pklfp)
    print(np.unique(slope))

    lis_elev = Path("samples/lis_elev_1KM.1gd4r")
    elev = parse_1gd4r(lis_elev)
    with open("lis_elev_1KM.pkl", "wb") as pklfp:
        pkl.dump(elev, pklfp)
    print(np.unique(elev))
    #"""
