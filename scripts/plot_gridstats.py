"""
Methods for plotting gridstat files generated by make_gridstat_hdf5 or
collect_gridstat_hdf5. Options for plotting histograms and scalar data on
a geographic grid.
"""
import numpy as np
import pickle as pkl
import random as rand
import json
import h5py
from datetime import datetime
from pathlib import Path
from multiprocessing import Pool
import matplotlib
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature

from testbed.plotting import geo_quad_plot,plot_hists,plot_geo_scalar

if __name__=="__main__":
    from list_feats import nldas_record_mapping,noahlsm_record_mapping
    from list_feats import statsgo_texture_default
    data_dir = Path("data")
    tg_dir = data_dir.joinpath("timegrids")
    static_pkl_path = data_dir.joinpath("static/nldas_static_cropped.pkl")
    gridstat_dir = Path("data/gridstats")
    gridstat_fig_dir = Path("figures/gridstats")

    full_gs_file = gridstat_dir.joinpath(
            "gridstats-full_2012-1_2023-12_y000-195_x000-462.h5")
    gsf = h5py.File(full_gs_file, "r")
    dlabels = json.loads(gsf["data"].attrs["dlabels"])
    slabels = json.loads(gsf["data"].attrs["slabels"])
    hparams = json.loads(gsf["data"].attrs["hist_params"])
    sdata = gsf["/data/static"][...]
    gridstats = gsf["/data/gridstats"]
    histograms = gsf["/data/histograms"]
    m_valid = sdata[...,slabels.index("m_valid")].astype(bool)

    ## Plot histograms from the aggregate gristats file
    #'''
    for i,dl in enumerate(dlabels):
        ## reduce the histogram over the monthly and spatial axes
        tmp_hist = np.sum(gsf["/data/histograms"][:,:,:,i,:], axis=(0,1,2))
        file_name = "_".join(
                ["gridstat-hist", dl] + full_gs_file.stem.split("_")[1:]
                ) + ".png"
        plot_hists(
                counts=[tmp_hist],
                labels=[dl],
                bin_bounds=[hparams["hist_bounds"][dl]],
                plot_spec={
                    "title":f"{dl} value histogram 2012-2023",
                    "ylabel":"Count",
                    "linewidth":3,
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
    exit(0)
    #'''

    ## Plot histograms by soil type
    '''
    plot_labels = [
            "rsm-10", "rsm-40", "rsm-100", "rsm-200", "rsm-fc",
            "soilm-10", "soilm-40", "soilm-100", "soilm-200", "soilm-fc"
            ]
    textures = sdata[...,slabels.index("int_soil")][m_valid]
    for l in plot_labels:
        ## extract this feature histogram and average over the month axis
        ## along with the label abbreviations and constituent percentages
        hist = np.sum(histograms[:,:,:,dlabels.index(l),:], axis=0)[m_valid]
        texture_hists,texture_name,texture_abbrv,line_colors = zip(*[
            (np.sum(hist[(textures==sint)],axis=0),
                *statsgo_texture_default[sint])
            for sint in np.unique(textures)
            ])
        file_name = "_".join([
                f"gridstat-hist-textures", l, *full_gs_file.stem.split("_")[1:]
                ]) + ".png"
        plot_hists(
                counts=texture_hists,
                labels=[f"{tn} ({tl})" for tn,tl in
                    zip(texture_name,texture_abbrv)],
                bin_bounds=[hparams["hist_bounds"][l]
                    for i in range(len(texture_hists))],
                line_colors=line_colors,
                plot_spec={
                    "title":f"{l} texture-wise value histograms 2012-2023",
                    "ylabel":f"counts",
                    "xlabel":l,
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
    '''

    ## Plot (min, max, mean, stddev) as a spatial quadrant plot
    #'''
    latitude = sdata[...,slabels.index("lat")]
    longitude = sdata[...,slabels.index("lon")]
    for i,l in enumerate(dlabels):
        tmp_data = [
                #np.where(m_valid, gridstats[:,:,:,i,j], np.nan)
                gridstats[:,:,:,i,j]
                for j in range(4)]
        tmp_data[0] = np.where(m_valid, np.nanmin(tmp_data[0],axis=0), np.nan)
        tmp_data[1] = np.where(m_valid, np.nanmax(tmp_data[1],axis=0), np.nan)
        tmp_data[2] = np.where(m_valid, np.nanmean(tmp_data[2],axis=0), np.nan)
        tmp_data[3] = np.where(m_valid, np.nanmean(tmp_data[3],axis=0), np.nan)
        file_name = "_".join([
                f"gridstat-bulk", l, *full_gs_file.stem.split("_")[1:]
                ]) + ".png"
        geo_quad_plot(
                data=tmp_data,
                flabels=[l+" "+m for m in
                    ("minimum", "maximum", "mean", "standard deviation")],
                latitude=latitude,
                longitude=longitude,
                geo_bounds=None,
                plot_spec={
                    "title":f"{l} 2012-2023 bulk statistics",
                    "cbar_shrink":.8,
                    "text_size":18,
                    "xtick_freq":10,
                    "ytick_freq":5,
                    "idx_ticks":True,
                    "cmap":"gnuplot",
                    "xtick_freq":20,
                    "ytick_freq":20,
                    "figsize":(24,12),
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
    #'''

    ## Plot gridded statistics on a CONUS map
    '''
    slabels,sdata = pkl.load(static_pkl_path.open("rb"))
    _,nl_labels = map(list,zip(*nldas_record_mapping))
    _,no_labels = map(list,zip(*noahlsm_record_mapping))
    flabels = nl_labels+no_labels
    avgs = np.load(Path("data/gridstats/gridstats_avg.npy"))

    avgs[sdata[slabels.index("m_9999")]] = np.nan

    soilm_labels = ("soilm-10","soilm-40","soilm-100","soilm-200",)
    soilm = avgs[..., tuple(flabels.index(s) for s in soilm_labels), 2]
    tsoil_labels = ("tsoil-10","tsoil-40","tsoil-100","tsoil-200",)
    tsoil = avgs[..., tuple(flabels.index(s) for s in tsoil_labels), 2]
    plot_geo_scalar(
            #data=avgs[...,flabels.index("apcp"),2],
            data=avgs[...,flabels.index("veg"),2],
            #data=np.average(tsoil, axis=-1),
            #data=np.sum(soilm, axis=-1),
            latitude=sdata[slabels.index("lat")],
            longitude=sdata[slabels.index("lon")],
            plot_spec={
                #"title":"2012-2022 Mean Full-Column Soil Moisture (kg/m^3)"
                #"title":"2012-2022 Mean Full-Column Soil Temperature (K)"
                #"title":"2012-2022 Mean hourly precipitation (kg/m^2)"
                "title":"Mean vegetation fraction (%)"
                },
            show=True,
            fig_path=None
            )
    #'''
