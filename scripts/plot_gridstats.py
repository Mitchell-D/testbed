"""
Methods for plotting gridstat files generated by make_gridstat_hdf5 or
collect_gridstat_hdf5. Options for plotting histograms and scalar data on
a geographic grid.
"""
import numpy as np
import pickle as pkl
import random as rand
import json
import h5py
from datetime import datetime
from pathlib import Path
from multiprocessing import Pool
import matplotlib.pyplot as plt

from testbed.plotting import geo_quad_plot,plot_hists,plot_geo_scalar

if __name__=="__main__":
    from testbed.list_feats import nldas_record_mapping,noahlsm_record_mapping
    from testbed.list_feats import statsgo_texture_default,units_names_mapping
    from testbed.list_feats import textures_porosity_wiltingp
    proj_root_dir = Path("/rhome/mdodson/testbed")
    tg_dir = proj_root_dir.joinpath("data/timegrids")
    static_pkl_path = proj_root_dir.joinpath(
            "data/static/nldas_static_cropped.pkl")
    gridstat_dir = proj_root_dir.joinpath("data/gridstats")
    #gridstat_fig_dir = proj_root_dir.joinpath("figures/gridstats")
    gridstat_fig_dir = proj_root_dir.joinpath("tmp")

    full_gs_file = gridstat_dir.joinpath(
            "gridstats-full_2012-1_2023-12_y000-195_x000-462.h5")
    gsf = h5py.File(full_gs_file, "r")
    dlabels = json.loads(gsf["data"].attrs["dlabels"])
    slabels = json.loads(gsf["data"].attrs["slabels"])
    hparams = json.loads(gsf["data"].attrs["hist_params"])
    sdata = gsf["/data/static"][...]
    gridstats = gsf["/data/gridstats"]
    histograms = gsf["/data/histograms"]
    m_valid = sdata[...,slabels.index("m_valid")].astype(bool)

    hist_plot_specs = {
            "apcp":{ "yscale":"log", "ylim":(5e4,1e8)},
            "dswrf":{ "ylim":(0,1.5e8), },
            "weasd":{ "yscale":"log", "ylim":(5e4,1e8)},
            }
    ## Plot histograms from the aggregate gristats file
    '''
    for i,dl in enumerate(dlabels):
        ## reduce the histogram over the monthly and spatial axes
        tmp_hist = np.sum(gsf["/data/histograms"][:,:,:,i,:], axis=(0,1,2))
        file_name = "_".join(
                ["gridstat-hist", dl] + full_gs_file.stem.split("_")[1:]
                ) + ".png"
        unit,full_name = units_names_mapping[dl]
        plot_hists(
                counts=[tmp_hist[:-1]],
                labels=[dl+f" ({unit})"],
                bin_bounds=[hparams["hist_bounds"][dl]],
                plot_spec={
                    "title":f"{full_name}\nCounts Distribution (2012-2023)",
                    "ylabel":"Counts",
                    "xlabel":unit,
                    "linewidth":3,
                    "cmap":"tab20",
                    "title_fontsize":30,
                    "label_fontsize":26,
                    "legend_fontsize":26,
                    "tick_fontsize":24,
                    **hist_plot_specs.get(dl, {}),
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
        plt.clf()
    #exit(0)
    '''

    ## Plot groupings of histograms by unit/purpose
    '''
    groupings = [
            {
                "unit":"%",
                "members":["rsm-10", "rsm-40", "rsm-100", "rsm-200"],
                "title":"Noah-LSM Relative Soil Moisture States",
                "xlabel":"Area Density of Relative Soil Moisture (%)",
                "file_name":"gridstat-hist_groupings_rsm.png",
                },
            {
                "unit":"W/m^2",
                "members":["soilm-10", "soilm-40", "soilm-100", "soilm-200"],
                "title":"Noah-LSM Soil Moisture States",
                "xlabel":"Area Density of Soil Moisture (kg/m^2)",
                "file_name":"gridstat-hist_groupings_soilm.png",
                },
            {
                "unit":"W/m^2",
                #"members":["evcw", "trans", "evbs", "dswrf", "dlwrf"],
                "members":["evcw", "trans", "evbs"],
                #"title":"Noah-LSM Energy Flux States",
                "title":"Noah-LSM Distributions of Water Fluxes",
                "xlabel":"Power Flux (W/m^2)",
                "file_name":"gridstat-hist_groupings_powerflux.png",
                "plot_spec":{
                    #"ylim":(0,5e8),
                    "yscale":"log",
                    "xlim":(0,300),
                    },
                },
            {
                "unit":"kg/m^2",
                "members":["bgrun", "ssrun", "snom"],
                "title":"Noah-LSM Water Mass States",
                "xlabel":"Area Density of Water Mass (kg/m^2)",
                "file_name":"gridstat-hist_groupings_runoff.png",
                "plot_spec":{
                    "ylim":(1,1e9),
                    "xscale":"linear",
                    "yscale":"log",
                    },
                },
            {
                "unit":"kg/m^2",
                "members":["apcp", "arain", "asnow", "ssrun"],
                "title":"Noah-LSM Precipitation Fractions",
                "xlabel":"Area Density of Water Mass (kg/m^2)",
                "file_name":"gridstat-hist_groupings_preciptype.png",
                "plot_spec":{
                    "ylim":(1e3,1e8),
                    "xscale":"linear",
                    "xlim":(0,15),
                    "yscale":"log",
                    },
                },
            ]
    for g in groupings:
        counts = [
                np.sum(gsf["/data/histograms"][:,:,:,ix,:], axis=(0,1,2))[:-1]
                for ix in [dlabels.index(l) for l in g["members"]]
                ]
        ## accidently truncated liquid precip too early.
        ## this is the ugliest thing i do in this repo.
        ## apcp and asnow have same hist bounds, but arain is stupidly 5.
        if "preciptype" in g["file_name"]:
            print(f"subtracting")
            counts[1] = counts[0] - counts[2]
            hparams["hist_bounds"]["arain"] = hparams["hist_bounds"]["apcp"]
        plot_hists(
                counts=[c for c in counts],
                labels=[
                    f"{units_names_mapping[l][1]} ({l})"
                    for l in g["members"]
                    ],
                bin_bounds=[hparams["hist_bounds"][l] for l in g["members"]],
                plot_spec={
                    "title":g["title"],
                    "ylabel":"(2012-2023) Counts",
                    "xlabel":g["xlabel"],
                    "linewidth":3,
                    "cmap":"brg",
                    "title_fontsize":20,
                    "label_fontsize":18,
                    "legend_fontsize":18,
                    **g.get("plot_spec", {})
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(g["file_name"]),
                )
        plt.clf()
    '''

    ## Plot histograms by soil type
    #'''
    plot_labels = [
            "rsm-10", "rsm-40", "rsm-100", "rsm-200", "rsm-fc",
            "soilm-10", "soilm-40", "soilm-100", "soilm-200", "soilm-fc"
            ]
    textures = sdata[...,slabels.index("int_soil")][m_valid]
    normalize = True
    widths = {"rsm-10":.1, "rsm-40":.3, "rsm-100":.6,
            "rsm-200":1, "rsm-fc":2}
    for l in plot_labels:
        ## extract this feature histogram and average over the month axis
        ## along with the label abbreviations and constituent percentages
        hist = np.sum(histograms[:,:,:,dlabels.index(l),:], axis=0)[m_valid]
        texture_hists,texture_name,texture_abbrv,line_colors = zip(*[
            (np.sum(hist[(textures==sint)],axis=0),
                *statsgo_texture_default[sint])
            for sint in np.unique(textures)
            ])
        if "rsm" in l:
            bin_bounds = []
            for tn in texture_name:
                w = widths[l]
                bb,bt = hparams["hist_bounds"][l.replace("rsm","soilm")]
                pr,wp = textures_porosity_wiltingp[tn]
                if pr is None or wp is None:
                    pr = .45
                    wp = .02
                bb = (bb/w/1000-wp)/(pr-wp)
                bt = (bt/w/1000-wp)/(pr-wp)
                bin_bounds.append((bb,bt))
        else:
            bin_bounds = [hparams["hist_bounds"][l]
                    for i in range(len(texture_hists))]
        file_name = "_".join([
                f"gridstat-hist-textures", l, *full_gs_file.stem.split("_")[1:]
                ]) + ".png"
        plot_hists(
                counts=texture_hists,
                labels=[f"{tn} ({tl})" for tn,tl in
                    zip(texture_name,texture_abbrv)],
                bin_bounds=bin_bounds,
                line_colors=line_colors,
                plot_spec={
                    "title":f"{l} Texture-wise Value Histograms 2012-2023",
                    "ylabel":["Counts", "Frequency"][normalize],
                    "xlabel":l,
                    "tick_fontsize":18,
                    "title_fontsize":24,
                    "label_fontsize":20,
                    "xlim":[(-.3,1.05) if "rsm" in l else None]
                    },
                show=False,
                normalize=normalize,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
    #'''

    ## Plot (min, max, mean, stddev) as a spatial quadrant plot
    '''
    latitude = sdata[...,slabels.index("lat")]
    longitude = sdata[...,slabels.index("lon")]
    #include = ["weasd"]
    for i,l in enumerate(dlabels):
        #if l not in include:
        #    continue
        tmp_data = [
                #np.where(m_valid, gridstats[:,:,:,i,j], np.nan)
                gridstats[:,:,:,i,j]
                for j in range(4)]
        tmp_data[0] = np.where(m_valid, np.nanmin(tmp_data[0],axis=0), np.nan)
        tmp_data[1] = np.where(m_valid, np.nanmax(tmp_data[1],axis=0), np.nan)
        tmp_data[2] = np.where(m_valid, np.nanmean(tmp_data[2],axis=0), np.nan)
        tmp_data[3] = np.where(m_valid, np.nanmean(tmp_data[3],axis=0), np.nan)
        file_name = "_".join([
                f"gridstat-bulk", l, *full_gs_file.stem.split("_")[1:]
                ]) + ".png"
        metrics = ("Minimum", "Maximum", "Mean", "Standard Deviation")
        unit,long_name = units_names_mapping[l]
        geo_quad_plot(
                data=tmp_data,
                flabels=[
                    f"{long_name} ({unit})\n{m} (2012-2023)"
                    for m in metrics
                    ],
                latitude=latitude,
                longitude=longitude,
                plot_spec={
                    "title":f"{long_name} Bulk Statistics (2012-2023)",
                    "cbar_shrink":.8,
                    "text_size":24,
                    "idx_ticks":False,
                    "show_ticks":False,
                    "cmap":"gnuplot2",
                    "xtick_freq":20,
                    "ytick_freq":20,
                    "figsize":(32,16),
                    "title_fontsize":32,
                    "use_pcolormesh":True,
                    "norm":"symlog",
                    },
                show=False,
                fig_path=gridstat_fig_dir.joinpath(file_name),
                )
        plt.clf()
    #'''

    ## Plot gridded statistics on a CONUS map
    '''
    slabels,sdata = pkl.load(static_pkl_path.open("rb"))
    _,nl_labels = map(list,zip(*nldas_record_mapping))
    _,no_labels = map(list,zip(*noahlsm_record_mapping))
    flabels = nl_labels+no_labels
    avgs = np.load(Path("data/gridstats/gridstats_avg.npy"))

    avgs[sdata[slabels.index("m_9999")]] = np.nan

    soilm_labels = ("soilm-10","soilm-40","soilm-100","soilm-200",)
    soilm = avgs[..., tuple(flabels.index(s) for s in soilm_labels), 2]
    tsoil_labels = ("tsoil-10","tsoil-40","tsoil-100","tsoil-200",)
    tsoil = avgs[..., tuple(flabels.index(s) for s in tsoil_labels), 2]
    plot_geo_scalar(
            #data=avgs[...,flabels.index("apcp"),2],
            data=avgs[...,flabels.index("veg"),2],
            #data=np.average(tsoil, axis=-1),
            #data=np.sum(soilm, axis=-1),
            latitude=sdata[slabels.index("lat")],
            longitude=sdata[slabels.index("lon")],
            plot_spec={
                #"title":"2012-2022 Mean Full-Column Soil Moisture (kg/m^3)"
                #"title":"2012-2022 Mean Full-Column Soil Temperature (K)"
                #"title":"2012-2022 Mean hourly precipitation (kg/m^2)"
                "title":"Mean vegetation fraction (%)"
                },
            show=True,
            fig_path=None
            )
    #'''
